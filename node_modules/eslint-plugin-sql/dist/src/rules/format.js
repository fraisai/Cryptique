"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const dropBaseIndent_1 = __importDefault(require("../utilities/dropBaseIndent"));
const isSqlQuery_1 = __importDefault(require("../utilities/isSqlQuery"));
const astring_1 = require("astring");
const pg_formatter_1 = require("pg-formatter");
const create = (context) => {
    var _a, _b, _c;
    const placeholderRule = (_b = (_a = context.settings) === null || _a === void 0 ? void 0 : _a.sql) === null || _b === void 0 ? void 0 : _b.placeholderRule;
    const pluginOptions = ((_c = context.options) === null || _c === void 0 ? void 0 : _c[0]) || {};
    const sqlTag = pluginOptions.sqlTag;
    const ignoreExpressions = pluginOptions.ignoreExpressions === true;
    const ignoreInline = pluginOptions.ignoreInline !== false;
    const ignoreTagless = pluginOptions.ignoreTagless !== false;
    const ignoreStartWithNewLine = pluginOptions.ignoreStartWithNewLine !== false;
    const ignoreBaseIndent = pluginOptions.ignoreBaseIndent === true;
    return {
        TemplateLiteral(node) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const tagName = (_e = (_b = (_a = node.parent.tag) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : (_d = (_c = node.parent.tag) === null || _c === void 0 ? void 0 : _c.object) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : (_h = (_g = (_f = node.parent.tag) === null || _f === void 0 ? void 0 : _f.callee) === null || _g === void 0 ? void 0 : _g.object) === null || _h === void 0 ? void 0 : _h.name;
            const sqlTagIsPresent = tagName === sqlTag;
            if (ignoreTagless && !sqlTagIsPresent) {
                return;
            }
            if (ignoreExpressions && node.quasis.length !== 1) {
                return;
            }
            const magic = '"gajus-eslint-plugin-sql"';
            let literal = node.quasis
                .map((quasi) => {
                return quasi.value.raw;
            })
                .join(magic);
            if (!sqlTagIsPresent && !(0, isSqlQuery_1.default)(literal, placeholderRule)) {
                return;
            }
            if (ignoreInline && !literal.includes('\n')) {
                return;
            }
            if (ignoreBaseIndent) {
                literal = (0, dropBaseIndent_1.default)(literal);
            }
            let formatted = (0, pg_formatter_1.format)(literal, context.options[1]);
            if (ignoreStartWithNewLine &&
                literal.startsWith('\n') &&
                !formatted.startsWith('\n')) {
                formatted = '\n' + formatted;
            }
            if (formatted.endsWith('\n\n')) {
                formatted = formatted.replace(/\n\n$/u, '\n');
            }
            if (formatted !== literal) {
                context.report({
                    fix: (fixer) => {
                        let final = formatted;
                        const expressionCount = node.expressions.length;
                        let index = 0;
                        while (index <= expressionCount - 1) {
                            final = final.replace(magic, '${' + (0, astring_1.generate)(node.expressions[index]) + '}');
                            index++;
                        }
                        return fixer.replaceTextRange([
                            node.quasis[0].range[0],
                            node.quasis[node.quasis.length - 1].range[1],
                        ], '`' + (final.startsWith('\n') ? final : '\n' + final) + '`');
                    },
                    message: 'Format the query',
                    node,
                });
            }
        },
    };
};
module.exports = {
    create,
    meta: {
        docs: {
            description: 'Matches queries in template literals. Warns when query formatting does not match the configured format (see Options).',
            url: 'https://github.com/gajus/eslint-plugin-sql#eslint-plugin-sql-rules-format',
        },
        fixable: 'code',
        schema: [
            {
                additionalProperties: false,
                properties: {
                    ignoreBaseIndent: {
                        default: false,
                        type: 'boolean',
                    },
                    ignoreExpressions: {
                        default: false,
                        type: 'boolean',
                    },
                    ignoreInline: {
                        default: true,
                        type: 'boolean',
                    },
                    ignoreStartWithNewLine: {
                        default: true,
                        type: 'boolean',
                    },
                    ignoreTagless: {
                        default: true,
                        type: 'boolean',
                    },
                    sqlTag: {
                        default: 'sql',
                        type: 'string',
                    },
                },
                type: 'object',
            },
            {
                additionalProperties: false,
                properties: {
                    anonymize: {
                        default: false,
                        type: 'boolean',
                    },
                    commaBreak: {
                        default: false,
                        type: 'boolean',
                    },
                    functionCase: {
                        default: 'lowercase',
                        type: 'string',
                    },
                    keywordCase: {
                        default: 'lowercase',
                        type: 'string',
                    },
                    noRcFile: {
                        default: false,
                        type: 'boolean',
                    },
                    spaces: {
                        type: 'number',
                    },
                    stripComments: {
                        default: false,
                        type: 'boolean',
                    },
                    tabs: {
                        default: false,
                        type: 'boolean',
                    },
                },
                type: 'object',
            },
        ],
        type: 'suggestion',
    },
};
