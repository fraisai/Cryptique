"use strict";
/* eslint-disable node/no-process-env */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const format_1 = require("./format");
const ava_1 = __importDefault(require("ava"));
(0, ava_1.default)('formats SQL', (t) => {
    const result = (0, format_1.format)('SELECT foo FROM bar');
    t.is(result, 'SELECT\n    foo\nFROM\n    bar\n');
});
(0, ava_1.default)('{anonymize: true}', (t) => {
    const result = (0, format_1.format)("SELECT 'foo' FROM 'bar'", {
        anonymize: true,
    });
    t.not(result, "SELECT\n    'foo'\nFROM\n    'bar'\n");
    t.regex(result, /select\s+'[^']+'\s+from\s+'[^']+'/iu);
});
(0, ava_1.default)('{stripComments: true} block comment', (t) => {
    const result = (0, format_1.format)('SELECT /* foo */', {
        stripComments: true,
    });
    t.is(result, 'SELECT\n');
});
(0, ava_1.default)('{stripComments: true} inline comment', (t) => {
    const result = (0, format_1.format)('SELECT -- foo', {
        stripComments: true,
    });
    t.is(result, 'SELECT\n');
});
(0, ava_1.default)('{functionCase: unchanged}', (t) => {
    const result = (0, format_1.format)('lOwEr()', {
        functionCase: 'unchanged',
    });
    t.is(result, 'lOwEr()\n');
});
// @see https://github.com/darold/pgFormatter/issues/30
// eslint-disable-next-line ava/no-skip-test
ava_1.default.skip('{functionCase: unchanged} custom function', (t) => {
    const result = (0, format_1.format)('concat_lower_or_upper()', {
        functionCase: 'unchanged',
    });
    t.is(result, 'concat_lower_or_upper()\n');
});
// @see https://github.com/darold/pgFormatter/issues/30
// eslint-disable-next-line ava/no-skip-test
ava_1.default.skip('{functionCase: unchanged} custom function with parameters', (t) => {
    const result = (0, format_1.format)('concat_lower_or_upper(123)', {
        functionCase: 'unchanged',
    });
    t.is(result, 'concat_lower_or_upper(123)\n');
});
(0, ava_1.default)('{functionCase: uppercase}', (t) => {
    const result = (0, format_1.format)('lOwEr()', {
        functionCase: 'uppercase',
    });
    t.is(result, 'LOWER()\n');
});
(0, ava_1.default)('{functionCase: lowercase}', (t) => {
    const result = (0, format_1.format)('lOwEr()', {
        functionCase: 'lowercase',
    });
    t.is(result, 'lower()\n');
});
(0, ava_1.default)('{functionCase: capitalize}', (t) => {
    const result = (0, format_1.format)('lOwEr()', {
        functionCase: 'capitalize',
    });
    t.is(result, 'Lower()\n');
});
(0, ava_1.default)('{keywordCase: unchanged}', (t) => {
    const result = (0, format_1.format)('sElEcT', {
        keywordCase: 'unchanged',
    });
    t.is(result, 'sElEcT\n');
});
(0, ava_1.default)('{keywordCase: uppercase}', (t) => {
    const result = (0, format_1.format)('sElEcT', {
        keywordCase: 'uppercase',
    });
    t.is(result, 'SELECT\n');
});
(0, ava_1.default)('{keywordCase: lowercase}', (t) => {
    const result = (0, format_1.format)('sElEcT', {
        keywordCase: 'lowercase',
    });
    t.is(result, 'select\n');
});
(0, ava_1.default)('{keywordCase: capitalize}', (t) => {
    const result = (0, format_1.format)('sElEcT', {
        keywordCase: 'capitalize',
    });
    t.is(result, 'Select\n');
});
(0, ava_1.default)('{spaces: 2}', (t) => {
    const result = (0, format_1.format)('SELECT 1', {
        spaces: 2,
    });
    t.is(result, 'SELECT\n  1\n');
});
(0, ava_1.default)('{tabs: true}', (t) => {
    const result = (0, format_1.format)('SELECT 1', {
        tabs: true,
    });
    t.is(result, 'SELECT\n\t1\n');
});
(0, ava_1.default)('{placeholder: <<(?:.*)?>>}', (t) => {
    const result = (0, format_1.format)('SELECT <<foo>>', {
        placeholder: '<<(?:.*)?>>',
    });
    t.is(result, 'SELECT\n    <<foo>>\n');
});
(0, ava_1.default)('{noRcFile: true}', (t) => {
    // pgFormatter tries to read from a default location $HOME/.pg_format, which
    // will error of HOME is not set. noRcFile prevents pgFormatter from reading
    // the file, so the following should run successfully.
    const home = process.env.HOME;
    try {
        delete process.env.HOME;
        (0, format_1.format)('SELECT 1', {
            noRcFile: true,
        });
        t.pass();
    }
    finally {
        process.env.HOME = home;
    }
});
(0, ava_1.default)('{commaBreak: true}', (t) => {
    const result = (0, format_1.format)('INSERT INTO shoes(type, color, price) VALUES ("sneaker", "white", 99)', {
        commaBreak: true,
    });
    t.is(result, 'INSERT INTO shoes (\n    type,\n    color,\n    price)\nVALUES (\n    "sneaker",\n    "white",\n    99)\n');
});
//# sourceMappingURL=format.test.js.map