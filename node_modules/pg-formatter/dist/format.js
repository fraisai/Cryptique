"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = void 0;
const node_child_process_1 = require("node:child_process");
const node_path_1 = require("node:path");
const executablePath = (0, node_path_1.resolve)(__dirname, 'pg-formatter/pg_format');
const defaultConfiguration = {
    anonymize: false,
    functionCase: 'unchanged',
    keywordCase: 'unchanged',
    noRcFile: false,
    spaces: 4,
    stripComments: false,
    tabs: false,
};
const createConfiguration = (userConfiguration = defaultConfiguration) => {
    return {
        ...defaultConfiguration,
        ...userConfiguration,
    };
};
const functionCaseOptionValueMap = {
    capitalize: 3,
    lowercase: 1,
    unchanged: 0,
    uppercase: 2,
};
const keywordCaseOptionValueMap = functionCaseOptionValueMap;
const createCommandLineArgs = (configuration) => {
    const args = [];
    if (configuration.anonymize) {
        args.push('--anonymize');
    }
    if (configuration.functionCase) {
        args.push([
            '--function-case',
            String(functionCaseOptionValueMap[configuration.functionCase]),
        ]);
    }
    if (configuration.keywordCase) {
        args.push([
            '--keyword-case',
            String(keywordCaseOptionValueMap[configuration.keywordCase]),
        ]);
    }
    if (configuration.noRcFile) {
        args.push('--no-rcfile');
    }
    if (configuration.placeholder) {
        args.push(['--placeholder', configuration.placeholder]);
    }
    if (configuration.spaces) {
        args.push(['--spaces', String(configuration.spaces)]);
    }
    if (configuration.stripComments) {
        args.push('--nocomment');
    }
    if (configuration.tabs) {
        args.push('--tabs');
    }
    if (configuration.commaBreak) {
        args.push('--comma-break');
    }
    return args;
};
const format = (sql, userConfiguration) => {
    const configuration = createConfiguration(userConfiguration);
    const args = createCommandLineArgs(configuration);
    const { error, output } = (0, node_child_process_1.spawnSync)('perl', [executablePath, ...args.flat()], {
        encoding: 'utf8',
        env: {
            LC_ALL: 'C.UTF-8',
        },
        input: sql,
    });
    if (error) {
        throw error;
    }
    return output.join('');
};
exports.format = format;
//# sourceMappingURL=format.js.map